/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.rretzbach.bobchat.core;

import de.rretzbach.bobchat.irc.Channel;
import de.rretzbach.bobchat.irc.message.ChatMessage;
import de.rretzbach.bobchat.irc.message.ChatMessageListener;
import de.rretzbach.bobchat.irc.Console;
import de.rretzbach.bobchat.irc.Conversation;
import de.rretzbach.bobchat.irc.util.ConversationEstablishedAction;
import de.rretzbach.bobchat.irc.util.IrcMessageListener;
import de.rretzbach.bobchat.irc.Network;
import de.rretzbach.bobchat.irc.util.NickChangeListener;
import de.rretzbach.bobchat.irc.Query;
import de.rretzbach.bobchat.irc.Router;
import de.rretzbach.bobchat.core.util.ChannelListAction;
import de.rretzbach.bobchat.core.util.WindowUtil;
import java.awt.BorderLayout;
import java.awt.Rectangle;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Date;
import javax.naming.event.EventDirContext;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import oracle.jrockit.jfr.openmbean.EventDefaultType;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.Mode;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(dtd = "-//de.rretzbach.bobchat.core//ChannelView//EN",
autostore = true)
@TopComponent.Description(preferredID = "ChannelViewTopComponent",
//iconBase="SET/PATH/TO/ICON/HERE", 
persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
//@ActionID(category = "Window", id = "de.rretzbach.bobchat.core.ChannelViewTopComponent")
//@ActionReference(path = "Menu/Window" /*, position = 333 */)
//@TopComponent.OpenActionRegistration(displayName = "#CTL_ChannelViewAction",
//preferredID = "ChannelViewTopComponent")
public final class ChannelViewTopComponent extends TopComponent implements ChatMessageListener {

    private String hostname;
    private Conversation conversation;
    private String type;

    public String getHostname() {
        return hostname;
    }

    public void setHostname(String hostname) {
        this.hostname = hostname;
    }

    public ChannelViewTopComponent() {
        initComponents();
        jChatPanel1.setupVerticalScrollbar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jChatPanel1 = new de.rretzbach.bobchat.core.JChatPanel();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, "Ostwind");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jChatPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 724, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 499, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        final JTextField textfield = (JTextField) evt.getSource();
        String message = (textfield).getText();

        conversation.sendInput(message);
        clearInputField(textfield);
    }//GEN-LAST:event_jTextField1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private de.rretzbach.bobchat.core.JChatPanel jChatPanel1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void componentOpened() {
        System.out.println("opening window " + getName());

    }

    public void registerComponent() {
        Runnable linkWindowToModel = new Runnable() {
            @Override
            public void run() {
                System.out.println("registering window " + getName());
                final Network network = Router.get().getNetwork(hostname);

                Conversation conversation = null;
                if (type.equals("channel")) {
                    Channel channel = network.getChannel(getName());
                    conversation = channel;
                } else if (type.equals("query")) {
                    Query query = network.getQuery(getName());
                    conversation = query;
                }
                conversation.getNetwork().addNickChangeListener(new NickChangeListener() {
                    @Override
                    public void onNickChange(String oldNick, String login, String hostname, String newNick) {
                        jLabel1.setText(newNick);
                    }
                });
                jLabel1.setText(conversation.getNetwork().getNick());

                setConversation(conversation);
            }
        };
        if (SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(linkWindowToModel);
        } else {
            linkWindowToModel.run();
        }
    }

    @Override
    public void componentClosed() {
        this.conversation.close();
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
        p.setProperty("channel", getName());
        p.setProperty("hostname", this.hostname);
        p.setProperty("type", this.type);
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
        setName(p.getProperty("channel"));
        setHostname(p.getProperty("hostname"));
        setType(p.getProperty("type"));
    }

    public void setConversation(Conversation channel) {
        this.conversation = channel;
        channel.addMessageListener(this);
        setName(this.conversation.getLabel());

        String type = "none";
        if (this.conversation instanceof Channel) {
            type = "channel";
        } else if (this.conversation instanceof Query) {
            type = "query";
        } else if (this.conversation instanceof Console) {
            type = "console";
        }

        setType(type);
    }

    @Override
    public void onMessage(ChatMessage message) {
        jChatPanel1.onMessage(message);
    }

    protected void clearInputField(final JTextField textfield) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                textfield.setText("");
            }
        });
    }

    public void setType(String type) {
        this.type = type;
    }
}
